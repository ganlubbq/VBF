*******
Summary
*******

Table :ref:`Initialization Table <Initialization>` lists the member functions related to methods of vector Boolean functions initialization. Table
:ref:`Representation Table <Representation>` lists the member functions related to the representations of vector Boolean functions as described above. All the member functions of *VBF* have an in-line definition, for instance: :code:`void TT(NTL::mat_GF2& X, VBF& F)` is also defined as :code:`inline NTL::mat_GF2 TT(VBF& F)`.

.. _Initialization:

+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| Initialization of VBF													                                                                     |
+=============================================================+==============================================================================================================================+
| **SYNTAX**                                                  | **DESCRIPTION**                                                                                                              |
+-------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+
| :code:`void puttt(const NTL::mat_GF2& X)`                   | (1) :math:`\matr{T}_F = \matr{T}`                                                                                            |
+-------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+
| :code:`void putHexTT(istream& s)`                           | (1) VBF which has an hexadecimal representation of its truth table defined by *s* (only for *m=1*)                           |
+-------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+
| :code:`void putDecTT(const NTL::vec_long& d,const long& m)` | (1) VBF with a decimal representation of its truth table defined by *d* and *m* is the number of component Boolean functions |
+-------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+
| :code:`void putirrpol(GF2X& g)`                             | (2) Set *F* by its trace *f* and the irreducible polynomial *g*            						     |
| :code:`void puttrace(string& f)`                            |                                                                     							     |
+-------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+
| :code:`void putpol(vec_pol& p)`                             | (3) Set *F* with Polynomials in *ANF* equals to *p*                 							     |
+-------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+
| :code:`void putanf(const NTL::mat_GF2& A)`                  | (4) :math:`\matr{ANF}_F = \matr{A}`                                 							     |
+-------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+
| :code:`void putchar(const NTL::mat_ZZ& C)`                  | (5) :math:`\matr{Img}(F) = \matr{C}`                                 							     |
+-------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+
| :code:`void putwalsh(const NTL::mat_ZZ& W)`                 | (6) :math:`\matr{WS}(F) = \matr{W}`                                 							     |
+-------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+
| :code:`void putper(const NTL::vec_ZZ& v)`                   | (10) VBF which is a permutation defined by :math:`\vec{v}`          							     |
+-------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+
| :code:`void putexp_comp(const NTL::vec_ZZ& v)`              | (11) VBF defined by Expansion and Compression DES vector :math:`\vec{v}`                      				     |
+-------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+
| :code:`void putsbox(const NTL::mat_ZZ& S)`                  | (12) VBF which is a DES S-Box defined by *S*                        							     |
+-------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------+

.. _Representation:

+--------------------------------------------------------------------------------------------------------------------+
| Representation of VBF                                                                                              |
+==============================================+=====================================================================+
| **SYNTAX**                                   | **DESCRIPTION**                                                     |
+----------------------------------------------+---------------------------------------------------------------------+
| :code:`void TT(NTL::mat_GF2& X, VBF& F)`     | (1) :math:`\matr{X}=\matr{T}_F`                                     |
+----------------------------------------------+---------------------------------------------------------------------+
| :code:`void getHexTT(ostream& s)`            | (1) *s* is the hexadecimal representation of the truth table of *F* |
+----------------------------------------------+---------------------------------------------------------------------+
| :code:`NTL::vec_long getDecTT() const`       | (1) Decimal representation of the truth table                       |
+----------------------------------------------+---------------------------------------------------------------------+
| :code:`void Trace(GF2EX& f, VBF& F)`         | (2) *F* has a trace representation defined by *f*                   |
+----------------------------------------------+---------------------------------------------------------------------+
| :code:`void Pol(NTL_SNS ostream& s, VBF& F)` | (3) *s* contains the Polynomials in *ANF* of *F*                    |
+----------------------------------------------+---------------------------------------------------------------------+
| :code:`void ANF(NTL::mat_GF2& X, VBF& F)`    | (4) :math:`\matr{X}=\matr{ANF}_F`                                   |
+----------------------------------------------+---------------------------------------------------------------------+
| :code:`void Charact(NTL::mat_ZZ& X, VBF& F)` | (5) :math:`\matr{X}=\matr{Img(F)}`                                  |
+----------------------------------------------+---------------------------------------------------------------------+
| :code:`void Walsh(NTL::mat_ZZ& X, VBF& F)`   | (6) :math:`\matr{X}=\matr{WS}(F)`                                   |
+----------------------------------------------+---------------------------------------------------------------------+
| :code:`void LAT(NTL::mat_ZZ& X, VBF& F)`     | (7) :math:`\matr{X}=\matr{LP}(F)`                                   |
+----------------------------------------------+---------------------------------------------------------------------+
| :code:`void DAT(NTL::mat_ZZ& X, VBF& F)`     | (8) :math:`\matr{X}=\matr{DP}(F)`                                   |
+----------------------------------------------+---------------------------------------------------------------------+
| :code:`void AC(NTL::mat_ZZ& X, VBF& F)`      | (9) :math:`\matr{X}=\matr{R}(F)`                                    |
+----------------------------------------------+---------------------------------------------------------------------+
| :code:`void PER(NTL::vec_ZZ& v, VBF& F)`     | (10) :math:`\vec{v}` is the permutation vector defined by *F*       |
+----------------------------------------------+---------------------------------------------------------------------+


