*******
Summary
*******

:ref:`Cryptographic criteria Table <Criteria>` lists the member functions related to these criteria.

.. _Criteria:

+--------------------------------------------------------------------------------------+
|                     Cryptographic criteria                                           |
+==================================+===================================================+
| SYNTAX                           | DESCRIPTION                                       |
+----------------------------------+---------------------------------------------------+
| void nl(NTL::RR& x, VBF& F)      | (1) :math:`\crit{NL}(F)=x`                        |
+----------------------------------+---------------------------------------------------+
| void nlr(long& x, VBF& F, int r) | (2) :math:`\crit{NL}_r(F)=x`                      |
+----------------------------------+---------------------------------------------------+
| void ld(NTL::RR& x, VBF& F)      | (3) :math:`\crit{LD}(F)=x`                        |
+----------------------------------+---------------------------------------------------+
| void Bal(int& bal, VBF& F)       | (4) If *F* is balanced returns *1*, otherwise *0* |
+----------------------------------+---------------------------------------------------+
| void CI(int& t, VBF& F)          | (5) *F* is an :math:`(n,m,t)-\crit{CI}`           |
+----------------------------------+---------------------------------------------------+
| void PC(int& l, VBF& F)          | (6) *F* satisfies the :math:`\crit{PC}(l)`        |
+----------------------------------+---------------------------------------------------+
| void maxAC(NTL::ZZ& x, VBF& F)   | (7) *F* has absolute indicator *x*                |
+----------------------------------+---------------------------------------------------+
| void sigma(NTL::ZZ& x, VBF& F)   | (7) *F* has sum-of-squares indicator *x*          |
+----------------------------------+---------------------------------------------------+
| void deg(int& d, VBF& F)         | (8) :math:`\crit{DEG}(F)=d`                       |
+----------------------------------+---------------------------------------------------+
| void AI(int& i, VBF& F)          | (9) :math:`\crit{AI}(F)=i`                        |
+----------------------------------+---------------------------------------------------+

:ref:`Member functions of the characteristics Table <Member>` lists the member functions related to the previous characterizing elements.

.. _Member:

+----------------------------------------------------------------------------------------------------------------------------------------------+
|                        Member functions of the characteristics (cryptographic criteria)                                                      |
+======================================================+=======================================================================================+
| SYNTAX                                               | DESCRIPTION                                                                           |
+------------------------------------------------------+---------------------------------------------------------------------------------------+
| void lp(NTL::RR& x, VBF& F)                          | (1) :math:`\crit{LP}(F)=x`                                                            |
+------------------------------------------------------+---------------------------------------------------------------------------------------+
| void linear(NTL_SNS ostream& s, VBF& F, ZZ& x)       | (2) Linear relations associated with the value *x* of the Linear Profile of *F*       |
+------------------------------------------------------+---------------------------------------------------------------------------------------+
| void dp(NTL::RR& x, VBF& F)                          | (3) :math:`\crit{DP}(F)=x`                                                            |
+------------------------------------------------------+---------------------------------------------------------------------------------------+
| void differential(NTL_SNS ostream& s, VBF& F, ZZ& x) | (4) Differential relations associated with the value *x* of the Linear Profile of *F* |
+------------------------------------------------------+---------------------------------------------------------------------------------------+
| NTL::mat_GF2 LS(VBF& F)                              | (5) Returns a matrix whose rows are the linear structures                             |
+------------------------------------------------------+---------------------------------------------------------------------------------------+
| NTL::RR nlmax(VBF& F)                                | (6) Maximum possible (for *n* even) nonlinearity                                      |
+------------------------------------------------------+---------------------------------------------------------------------------------------+
| void typenl(int& typenl, VBF& F)                     | (7) 1=Bent, 2=Almost Optimal, 3=Linear                                                |
+------------------------------------------------------+---------------------------------------------------------------------------------------+
| NTL::RR ldmax(VBF& F)                                | (8) Maximum possible linearity distance                                               |
+------------------------------------------------------+---------------------------------------------------------------------------------------+
| void FWH(NTL::mat_ZZ& X, VBF& F)                     | (9) Frequency distribution of the absolute values of the Walsh Spectrum               |
+------------------------------------------------------+---------------------------------------------------------------------------------------+
| void FAC(NTL::mat_ZZ& X, VBF& F)                     | (10) Frequency distribution of the absolute values of Autocorrelation Spectrum        |
+------------------------------------------------------+---------------------------------------------------------------------------------------+
| NTL::mat_GF2 fixedpoints(VBF& F)                     | (12) Return fixed points                                                              |
+------------------------------------------------------+---------------------------------------------------------------------------------------+
| NTL::mat_GF2 negatedfixedpoints(VBF& F)              | (13) Return negated fixed						               |
+------------------------------------------------------+---------------------------------------------------------------------------------------+

